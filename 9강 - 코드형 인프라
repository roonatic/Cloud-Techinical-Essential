<9강 - 코드형 인프라>
[개요]
코드형 인프라(Infrastructure as Code)
 - 기존 구성: 많은 수동 작업 수행
 - 이 모든 작업은 재현이 매우 어려움

 - IaC는 인프라 환경 요규사항을 표현하기 위해 코드를 작성하고, 
 IaC 도구를 사용해 변경사항을 원하는 환경에 적용하는 개념
 - 코드를 통해 인프라를 생성, 업데이트, 삭제

 * IaC(Infrastructure as Code) 구조
 - Ad hoc 스크립트
  - 쉘스크립트부터 파이썬 등을 활용한 코드
  - 간단하지만 규모가 커지면 대응이 어려운 문제
 - 구성관리도구
  - 구성 내용을 관리하는 코드 작성
  - 분산 환경에서 동작 가능
  - 확장의 편리함
 - 서버 템플릿 도구
  - 서버 템플릿을 이미지화
  - IaC의 근간
 - 프로비저닝 도구
  - 서버 자체를 구성하기 위한 도구
  - 서버뿐만 아니라 네트워크, 서브넷, 데이터베이스 등도 구성

 * IaC(Infrastructure as Code)
  - 인프라를 애플리케이션 코드와 동일한 방식으로 처리
   - IaC는 기반구조 요구사항을 표현하기 위해 코드를 작성하고 IaC 도구를 사용해
   변경사항을 클라우드/온프레미스 환경에 적용하는 개념
   - 시간 경과에 따른 인프라 변경 추적(버전 제어)
   - 인프라에 반복성 제공

 - 두가지 핵심 기능
  - 인프라 프로비저닝: 컴퓨팅, 데이터베이스, 스토리지 및 네트워킹 프로비저닝
  - 구성관리: 프로비저닝된 리소스에 올바른 소프트웨어 및 도구 설치

  * IaC(Infrastructure as Code) - AWS
   - 인프라 프로비저닝
    - 오픈소스도구: Terraform
    - AWS 서비스: AWS CloudFormation
   - 구성 관리
    - 오픈 소스 도구: Chef, Puppet, Ansible
    - AWS Service: AWS OpsWorks

 * CloudFormation: AWS 인프라를 구성하기 위해 사용하는 코드 기반 서비스
  - CloudFormation 템플릿 내에서 다음과 같이 구성 후 요청
   - 보안 그룹 생성
   - 보안 그룹을 사용하는 두 대의 EC2 머신 생성
   - 이 EC2 머신에 대해 두 개의 탄력적 IP 생성
   - S3 버킷 생성
   - 생성된 머신을 위한 로드 밸런서(ELB) 생성
  - CloudFormation은 사용자가 지정한 구성을 올바른 순서로 생성

  * AWS CloudFormation 장점
   - 코드로서의 인프라
    - 리소스를 수동으로 생성하지 않아 제어에 탁월
    - Github 등을 사용하여 코드를 버전 제어 가능
    - 인프라 변경사항을 코드를 통해 검토
   - 비용
    - 각 리소스에 태그가 지정되어 비용을 쉽게 확인가능
    - CloudFormation 템플릿을 사용하여 리소스 비용 추정 가능
    - 절약 전략: Dev에서는 템플릿을 오후 5시에 자동 삭제 오전 8시에 다시 생성된
   - 생산력
    - 즉석에서 클라우드의 인프라를 삭제하고 재생성하는 기능
    - 템플릿용 다이어그램 자동 생성
    - 선언적 프로그래밍(순서 및 오케스트레이션을 파악할 필요 없음)
   - 바퀴를 재발명하지 마십시오
    - 웹에 있는 기존 템플릿을 활용 가능
    - 공식 도큐먼트 활용
   - (거의) 모든 AWS 리소스 지원

  * AWS OpWorks: Chef 및 Puppet의 관리형 인스턴스를 제공하는 구성 관리 서비스
  AWS OpsWorks = 관리형 Chef 및 Puppet
  - 구성 관리를 위한 IaC 서비스
  - 서버 구성을 자동으로 수행
  - EC2 및 온프레미스 VM과도 연동 가능
  - 표준 AWS 리소스는 프로비저닝 가능: EC2 인스턴스, 데이터베이스, 로드 밸런서, EBS 볼륨

  * Chef/Puppet이란
   - 구성을 코드로 관리 가능한 오픈 소수 도구
   - 일관된 배포 지원
   - Lunux/Windows에서 작동
   - 자동화 기능: 사용자 계정, cron, ntp, 패키지, 서비스...
   - CloudFormation과의 차이점
    - 크로스 클라우드 지원
    - 구성 관리에 초점
    