모니터링: 쿼리 카운트, 에러 카운트, 처리시간, 서버의 활성 시간과 같은 시스템에 관련된
정량적 수치를 실시간으로 수집, 처리, 집계, 보여주는 모든 행위
= Signal, Telemetry, Trace등을 수집하고 집계하는 행위(Logging 포함)
- 임계점을 넘어가는 상태에 대한 알림 및 조치
예) DB 디스크 사용량 임게점 초과시 알람 발생 및 통지 > 스토리지 확장

* 관측성, 관측가능성(Observability)
- 모니터링은 관측성의 하위 집합
- 시스템의 잠재적인 문제와 실패를 빠르게 예측하기 위해 모든 서비스들의 동작을 추적해야 함
- 모니터링을 통해 상태를 확인하고, 특정 임계치에 대한 알람을 발생하기 위해 메트릭을 수집, 집계(Aggregation)
- 관측성은 예측 불가능한 모든 장애 간으성을 알 수 없다는 것을 전제로 함
- 모니터링 측면: 디스크 사용량, I/O Queue, 시스템 상태 등
- 관측성 측면 - 지연시간, hops수, 메세지큐, DB, 서비스 대기 시간,
메세지 대기열 또는 데이터베이스에 관련된 인프라 홉과 같은 요청 경로를 추적하고
특정 사용자 및 요청에 대해 데이터베이스 쿼리가 실행된 수준과 원인까지 파악하는 것

* 관측성 확보
 - 관측성 확보를 위해서는 세밀한(High Resolution) 데이터가 필요함
  - Metric, Logging, Tracing
 - 집계(Aggregation)보다 중요한건 수집된 데이터를 분석하는 능력
 - 문제(장애) 발생시 필요한건 고해상도(High Resolution) 메트릭(Metric) 수집과 탐색 도구

 * 메트릭(Metric): 응용 프로그램 및 서비스의 성능과 품질을 측정하는데 도움이 되는 정량 데이터
 - Database 및 API Latency
 - Request content length
 - Open file descriptor 수
 - Cache hit/miss 수

 * 트레이싱(Tracing): 서비스 요청에 대한 애플리케이션 또는 서비스 구조 확인
 - 모든 서비스들 간 데이터 프름을 시각화하여 아키텍처 상의 병목 현상을 파악

 * 로깅(Logging): Log들을 수집해서 보여주는 것
 - Log: 실행 중인 프로세스에서 발생하는 이벤트

 * 메트릭 수집 방식의 이해(Push vs Pull)
  - Push
   - 모니터링 주체가 서버에 정보를 보냄
   - 수집 서버 정보를 알아야함
   - 버퍼링 메커니즘(queue)
   - 메트릭 정보가 변경될 때마다 일괄 배포
   - 예: TICK Stack, Nagios
  - Pull
   - exporters(like agent)
   - 수집 서버 정보 모름
   - 서버에서 필요한 메트릭을 수집
   - Service Discovery
   - Push 방식도 지원(Pushgateway)

 * AWS CloudWatch
  - CloudWatch는 AWS의 모든 서비스에 대한 지표 제공
  - Metric의 대시보드 생성 가능
  - 고유한 사용자 지정 지표 정의하고 CloudWatch에서 관리 가능

  * CloudWatch Logs
  - 로그 그룹: 애플리케이션을 나타내는 임의의 이름
  - 로그 스트림: 애플리케이션/로그파일/컨테이너 내의 인스턴스
  - 로크 만료 정책을 정의 가능

  * CloudWatch Alarm Targets
   - 모든 지표에 대한 알림을 트리거하는데 사용
   - 다양한 옵션
   - EC2 인스턴스 중지, 종료, 재부팅 또는 복구
   - Auto Scaling 작업 트리거
   - SNS에 알림 보내기

  * EC2 Instance Recovery
  - 상태 확인: 인스턴스 상태 = EC2 VM 확인
  - 복구: 동일한 프라이빗, 퍼블릭, 탄력적 IP, 메타데이터, 배치 그룹

  * AWS CroudTrail
  - AWS 계정에 대한 거버넌스, 규정 준수 및 감사가 가능하도록 정보 제공
  - AWS 계정 내에서 이루어진 이벤트/API 호출 기록을 확인
  - CloudTrail의 로그를 CLoudWatch Logs로 전달하거나 S3에 저장 가능